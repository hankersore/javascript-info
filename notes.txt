Notes for JS

A variable is a “named storage” for data

Normally, we need to define a variable before using it. But in the old times, it was technically possible to create a variable by a mere assignment of the value without using let. This still works now if we don’t put use strict in our scripts to maintain compatibility with old scripts.

NaN is sticky. Any further mathematical operation on NaN returns NaN

Null is just a special value which represents “nothing”, “empty” or “value unknown”.

The meaning of undefined is “value is not assigned”.

'conditional operator ?'
let result = condition ? value1 : value2;
The condition is evaluated: if it’s truthy then value1 is returned, otherwise – value2.

OR "||" finds the first truthy value (one truthy is enough for being true)

AND “&&” finds the first falsy value (everything should be truthy for it to be true)

nullish ?? returns the first argument if it’s not null/undefined. Otherwise, the second one.
The nullish coalescing operator ?? provides a short way to choose the first “defined” value from a list

// FUNCTIONS

1. If a function is called, but an argument is not provided, then the corresponding value becomes undefined. 

2. The directive return can be in any place of the function. When the execution reaches it, the function stops, and the value is returned to the calling code.
There may be many occurrences of return in a single function

3. It is possible to use return without a value. That causes the function to exit immediately.

4. An empty return is also the same as return undefined.

5. No matter how the function is created, a function is a value.

// Function Expression vs Function Declaration

Function Declaration: a function, declared as a separate statement, in the main code flow.
Function Expression: a function, created inside an expression or inside another syntax construct.

1. A Function Expression is created when the execution reaches it and is usable only from that moment.
A Function Declaration can be called earlier than it is defined.

2. In strict mode, when a Function Declaration is within a code block, it’s visible everywhere inside that block. But not outside of it.

When to choose Function Declaration versus Function Expression?
As a rule of thumb, when we need to declare a function, the first thing to consider is Function Declaration syntax. It gives more freedom in how to organize our code, because we can call such functions before they are declared.

That’s also better for readability, as it’s easier to look up function f(…) {…} in the code than let f = function(…) {…};. Function Declarations are more “eye-catching”.

…But if a Function Declaration does not suit us for some reason, or we need a conditional declaration (we’ve just seen an example), then Function Expression should be used.

// ARROW FUNCTIONS

Arrow functions are handy for simple actions, especially for one-liners. They come in two flavors:

1. Without curly braces: (...args) => expression – the right side is an expression: the function evaluates it and returns the result. Parentheses can be omitted, if there’s only a single argument, e.g. n => n*2.
2. With curly braces: (...args) => { body } – brackets allow us to write multiple statements inside the function, but we need an explicit return to return something.
Example:
let sum = (a, b) => {
  let result = a + b;
  return result; 
};